# papri_project_root-/docker-compose.yml
version: '3.9'

services:
  # Django Backend Application
  backend:
    build:
      context: ./backend # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile
    container_name: papri_backend
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn papri_project.wsgi:application --bind 0.0.0.0:8000 --workers 3 --log-level info"
    volumes:
      - ./backend:/app # Mounts the backend code directory for live reloading in dev
      - static_volume:/app/staticfiles_collected # Persist static files
      - media_volume:/app/mediafiles_storage   # Persist media files
    ports:
      - "8000:8000" # Maps port 8000 on the host to port 8000 in the container
    env_file:
      - ./backend/.env # Load environment variables from .env file in backend directory
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
      redis:
        condition: service_started # Wait for Redis to start
    restart: unless-stopped
    networks:
      - papri_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: papri_db
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    environment:
      POSTGRES_DB: ${DB_NAME:-papri_db}
      POSTGRES_USER: ${DB_USER:-papri_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-papri_password}
    ports:
      - "5432:5432" # Expose PostgreSQL on the standard port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - papri_network

  # Redis (for Celery Broker & Cache)
  redis:
    image: redis:7-alpine
    container_name: papri_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Persist Redis data
    restart: unless-stopped
    networks:
      - papri_network

  # Celery Worker - Default Queue (for quick tasks)
  celery_worker_default:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: papri_celery_default
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A papri_project worker -l info -Q default -c 2"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - backend 
      - db
      - redis
    restart: unless-stopped
    networks:
      - papri_network

  # Celery Worker - AI Processing Queue
  celery_worker_ai:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: papri_celery_ai
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A papri_project worker -l info -Q ai_processing -c 1"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - db
      - redis
    restart: unless-stopped
    networks:
      - papri_network

  # Celery Worker - Video Editing Queue
  celery_worker_video:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: papri_celery_video
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A papri_project worker -l info -Q video_editing -c 1"
    volumes:
      - ./backend:/app
      - media_volume:/app/mediafiles_storage 
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - db
      - redis
    restart: unless-stopped
    networks:
      - papri_network

  # Celery Beat (Scheduler for periodic tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: papri_celery_beat
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A papri_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - backend
      - db
      - redis
    restart: unless-stopped
    networks:
      - papri_network

# Docker Networks
networks:
  papri_network:
    driver: bridge

# Docker Volumes (to persist data)
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
